import numpy as np
import matplotlib.pyplot as plt

# サンプル信号の定義
fs = 10000  # サンプリング周波数 (Hz)
f1 = 50     # 基本周波数 (Hz)
duration = 1.0  # 信号の長さ (秒)
t = np.linspace(0, duration, int(fs * duration), endpoint=False)

# 基本周波数と高調波を含む信号の生成
signal = np.sin(2 * np.pi * f1 * t) + 0.1 * np.sin(2 * np.pi * 2 * f1 * t) + 0.05 * np.sin(2 * np.pi * 3 * f1 * t)

# FFTの計算
N = len(signal)
fft_values = np.fft.fft(signal)
fft_values = np.abs(fft_values[:N // 2])  # 正の周波数成分のみ
frequencies = np.fft.fftfreq(N, 1 / fs)[:N // 2]

# 基本周波数成分の振幅 (V1)
V1 = fft_values[np.argmax(frequencies > f1 * 0.99)]

# 高調波成分の振幅 (V2, V3, ...)
harmonics = fft_values[np.logical_and(frequencies > f1 * 1.01, frequencies < f1 * 10)]  # 2次から10次の高調波成分を取得
THD = np.sqrt(np.sum(harmonics**2)) / V1 * 100  # THDを計算 (%)

print(f"THD: {THD:.2f} %")

# プロット (周波数スペクトル)
plt.figure(figsize=(10, 6))
plt.plot(frequencies, 20 * np.log10(fft_values), label='Spectrum')
plt.xlim(0, 500)  # 表示する周波数範囲
plt.xlabel('Frequency (Hz)')
plt.ylabel('Magnitude (dB)')
plt.title('Frequency Spectrum')
plt.grid()
plt.show()

import numpy as np
import matplotlib.pyplot as plt
from scipy.fft import fft, fftfreq
from scipy.signal import butter, lfilter

# --- 1. 信号の生成 ---
# サンプリング設定
fs = 1000  # サンプリング周波数 (Hz)
t = np.linspace(0, 1.0, fs, endpoint=False)  # 1秒間の時間軸

# 信号の生成 (例: 50Hzと150Hzの正弦波)
f1, f2 = 50, 150  # 周波数成分
signal = 0.6 * np.sin(2 * np.pi * f1 * t) + 0.4 * np.sin(2 * np.pi * f2 * t)

# --- 2. アンチエイリアシングフィルター ---
def butter_lowpass(cutoff, fs, order=5):
    nyq = 0.5 * fs  # ナイキスト周波数
    normal_cutoff = cutoff / nyq
    b, a = butter(order, normal_cutoff, btype='low', analog=False)
    return b, a

def apply_lowpass_filter(data, cutoff=100):
    b, a = butter_lowpass(cutoff, fs)
    y = lfilter(b, a, data)
    return y

# フィルター適用前と後の信号
cutoff_frequency = 100  # アンチエイリアシングフィルターのカットオフ周波数 (Hz)
filtered_signal = apply_lowpass_filter(signal, cutoff=cutoff_frequency)

# --- 3. FFTによる周波数スペクトルの計算 ---
def compute_fft(data, fs):
    N = len(data)
    yf = fft(data)
    xf = fftfreq(N, 1 / fs)[:N // 2]  # 正の周波数成分のみ取得
    amplitude = 2.0 / N * np.abs(yf[:N // 2])
    return xf, amplitude

# FFTの計算
xf_original, amplitude_original = compute_fft(signal, fs)
xf_filtered, amplitude_filtered = compute_fft(filtered_signal, fs)

# --- 4. プロット: 時間領域の信号とスペクトル ---
plt.figure(figsize=(12, 8))

# 元の信号とフィルタ後の信号（時間領域）
plt.subplot(3, 1, 1)
plt.plot(t, signal, label='Original Signal', alpha=0.6)
plt.plot(t, filtered_signal, label='Filtered Signal', linestyle='--', alpha=0.8)
plt.title('Time Domain Signal')
plt.xlabel('Time [s]')
plt.ylabel('Amplitude')
plt.legend()
plt.grid(True)

# 元の信号の周波数スペクトル
plt.subplot(3, 1, 2)
plt.plot(xf_original, amplitude_original, label='Original Spectrum', color='blue')
plt.title('Frequency Spectrum of Original Signal')
plt.xlabel('Frequency [Hz]')
plt.ylabel('Amplitude')
plt.grid(True)

# フィルタ後の信号の周波数スペクトル
plt.subplot(3, 1, 3)
plt.plot(xf_filtered, amplitude_filtered, label='Filtered Spectrum', color='green')
plt.title('Frequency Spectrum of Filtered Signal')
plt.xlabel('Frequency [Hz]')
plt.ylabel('Amplitude')
plt.grid(True)

plt.tight_layout()
plt.show()

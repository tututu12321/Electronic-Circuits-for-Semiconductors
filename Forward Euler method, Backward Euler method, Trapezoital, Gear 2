import numpy as np
import matplotlib.pyplot as plt

# 非線形関数とその微分 (例: f(x) = x^2)
def f(x):
    return x**2

# パラメータの設定
dt = 0.1  # 時間ステップ
t_end = 5  # シミュレーションの終了時間
n_steps = int(t_end / dt)  # ステップ数

# 時間と解の配列の初期化
t = np.linspace(0, t_end, n_steps + 1)
x_forward = np.zeros(n_steps + 1)
x_backward = np.zeros(n_steps + 1)
x_trapezoidal = np.zeros(n_steps + 1)
x_gear2 = np.zeros(n_steps + 1)

# 初期条件
x_forward[0] = 1
x_backward[0] = 1
x_trapezoidal[0] = 1
x_gear2[0] = 1

# 前進オイラー法
for i in range(n_steps):
    x_forward[i + 1] = x_forward[i] + dt * f(x_forward[i])

# 後退オイラー法
for i in range(n_steps):
    # 後退オイラー法では暗黙的解法が必要だが、簡単化のために前の値を近似として使用
    x_backward[i + 1] = x_backward[i] + dt * f(x_backward[i])

# トラペゾイダル法（台形法）
for i in range(n_steps):
    x_trapezoidal[i + 1] = x_trapezoidal[i] + dt / 2 * (f(x_trapezoidal[i]) + f(x_trapezoidal[i] + dt * f(x_trapezoidal[i])))

# ギアー2法
for i in range(1, n_steps):
    if i == 1:
        # 初期ステップではオイラー法を使う
        x_gear2[i] = x_gear2[i - 1] + dt * f(x_gear2[i - 1])
    else:
        x_gear2[i + 1] = (4/3) * x_gear2[i] - (1/3) * x_gear2[i - 1] + (2/3) * dt * f(x_gear2[i])

# プロット
plt.figure(figsize=(10, 6))
plt.plot(t, x_forward, label='Forward Euler', linestyle='--', color='blue')
plt.plot(t, x_backward, label='Backward Euler', linestyle='-.', color='red')
plt.plot(t, x_trapezoidal, label='Trapezoidal', linestyle='-', color='green')
plt.plot(t, x_gear2, label='Gear 2', linestyle=':', color='purple')

plt.xlabel('Time (t)')
plt.ylabel('x(t)')
plt.title('Numerical Solutions of Nonlinear Element with Different Methods')
plt.grid(True)
plt.legend()
plt.show()

import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit

# Sample data: VDS and ID (replace these with your actual data)
VDS = np.array([0.1, 0.2, 0.3, 0.4, 0.5])  # Sample drain-source voltages (in volts)
ID = np.array([1.2e-6, 1.8e-6, 2.3e-6, 2.6e-6, 2.9e-6])  # Sample drain currents (in amperes)

# Define the MOSFET model for fitting
def mosfet_model(VDS, K, Vth, lambda_):
    # Assume a fixed Vgs (e.g., 5V) and calculate Id with channel-length modulation
    Vgs = 5  # Example fixed gate-source voltage in volts
    return K * (Vgs - Vth)**2 * (1 + lambda_ * VDS)

# Initial guesses for the parameters (K, Vth, lambda)
initial_guesses = [1e-3, 1.0, 0.01]  # These should be adjusted based on the expected range

# Fit the data to the model
params, params_covariance = curve_fit(mosfet_model, VDS, ID, p0=initial_guesses)

# Extract the fitted parameters
K_fitted, Vth_fitted, lambda_fitted = params

# Print the fitted parameters
print(f"Fitted K: {K_fitted:.4e}")
print(f"Fitted Vth: {Vth_fitted:.4f} V")
print(f"Fitted Î» (channel-length modulation parameter): {lambda_fitted:.4f} V^-1")

# Plot the data and the fitted curve
plt.scatter(VDS, ID, label="Sampled Data", color='red')
VDS_fit = np.linspace(min(VDS), max(VDS), 100)  # Generate points for smooth curve
ID_fit = mosfet_model(VDS_fit, *params)  # Generate the fitted ID values
plt.plot(VDS_fit, ID_fit, label="Fitted Curve", color='blue')

# Customize the plot
plt.title("MOSFET Channel Length Modulation")
plt.xlabel("$V_{DS}$ (V)")
plt.ylabel("$I_D$ (A)")
plt.legend()
plt.grid(True)
plt.show()

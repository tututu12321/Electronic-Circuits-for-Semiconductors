import numpy as np

def solve_linear_system(A, b):
    """
    連立方程式 A * x = b を解く。
    - 正方行列で逆行列が存在する場合は numpy.linalg.solve を使用。
    - それ以外の場合は SVD を使用して擬似逆行列で解く。
    
    Parameters:
    A (ndarray): 係数行列
    b (ndarray): 右辺ベクトル
    
    Returns:
    x (ndarray): 連立方程式の解
    """
    try:
        # 正方行列で逆行列が存在する場合
        x_solution = np.linalg.solve(A, b)
        print("Solution with numpy.linalg.solve:\n", x_solution)
    except np.linalg.LinAlgError:
        # 正方行列でない、またはランクが低い場合
        print("Matrix is not invertible or is not square. Using SVD pseudo-inverse.")
        
        # 特異値分解 (SVD)
        U, S, Vt = np.linalg.svd(A, full_matrices=False)
        
        # 特異値の逆数をとり、対角行列 S_inv を作成（小さい値を 0 として扱う）
        S_inv = np.diag([1 / s if s > 1e-10 else 0 for s in S])
        
        # 擬似逆行列 A_pseudo_inverse の計算
        A_pseudo_inverse = Vt.T @ S_inv @ U.T
        
        # 擬似逆行列を用いて解を求める
        x_solution = A_pseudo_inverse @ b
        print("Solution with SVD pseudo-inverse:\n", x_solution)
    
    return x_solution

# --- 使用例 ---

# 例1: 正則な正方行列
A_square = np.array([[2, 1], [1, 3]])
b_square = np.array([5, 7])
print("Example 1: Solving with a regular square matrix")
x1 = solve_linear_system(A_square, b_square)
print("Result for Example 1:\n", x1)

# 例2: 非正則または非正方行列
A_non_square = np.array([[2, 4], [1, 3], [0, 0]])  # ランクが低い場合
b_non_square = np.array([1, 2, 0])
print("\nExample 2: Solving with a singular or non-square matrix")
x2 = solve_linear_system(A_non_square, b_non_square)
print("Result for Example 2:\n", x2)

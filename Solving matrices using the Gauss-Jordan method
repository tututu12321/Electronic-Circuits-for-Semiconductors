import numpy as np

def gauss_jordan(A, b):
    """
    ガウス・ジョルダン法による連立方程式の解法.
    A * x = b の形式で解を求める.
    
    Args:
        A (numpy.ndarray): 係数行列 (n x n)
        b (numpy.ndarray): 定数ベクトル (n x 1)
        
    Returns:
        numpy.ndarray: 解ベクトル x (n x 1)
    """
    # 行列Aとベクトルbを連結して拡大係数行列を作成
    aug_matrix = np.hstack([A, b.reshape(-1, 1)])
    n = len(b)

    # ガウス・ジョルダン法の適用
    for i in range(n):
        # ピボット選択: 対角成分が0でないことを確認して正規化
        if aug_matrix[i, i] == 0:
            raise ValueError("Pivot element is zero. Matrix may be singular.")

        # ピボット行の正規化
        aug_matrix[i] = aug_matrix[i] / aug_matrix[i, i]

        # 他の行を処理して、i列の成分を0にする
        for j in range(n):
            if i != j:
                aug_matrix[j] = aug_matrix[j] - aug_matrix[j, i] * aug_matrix[i]

    # 最後の列が解ベクトル
    x = aug_matrix[:, -1]
    return x

# 例: G * V = I の形式で連立方程式を解く
G = np.array([
    [3, -1, 2],
    [2, 1, 1],
    [1, -2, 3]
], dtype=float)

I = np.array([1, 2, 3], dtype=float)  # 定数ベクトル

# 解を求める
V = gauss_jordan(G, I)
print("Solution vector V:")
print(V)

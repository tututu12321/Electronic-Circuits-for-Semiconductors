import numpy as np
import matplotlib.pyplot as plt

# NMOSとPMOSのモデルパラメータ
mu_n = 200e-4      # NMOSの移動度 (m^2/Vs)
mu_p = 100e-4      # PMOSの移動度 (m^2/Vs)
Cox = 1e-3         # ゲート酸化膜容量 (F/m^2)
W = 100e-6         # チャンネル幅 (m)
L = 0.5e-6         # チャンネル長 (m)
Vth_n = 0.6        # NMOSのしきい値電圧 (V)
Vth_p = -0.6       # PMOSのしきい値電圧 (V)
lambda_n = 0.1     # NMOSのチャネル長変調パラメータ
lambda_p = 0.1     # PMOSのチャネル長変調パラメータ

# VgsとVdsの範囲
Vgs_values = np.arange(0.6, 1.0, 0.05)  # Vgs (0.6V〜0.9V, 50mVステップ)
Vds_values = np.linspace(0, 3, 100)     # Vds (0V〜3V, 100ポイント)

# ドレイン電流計算関数
def calculate_Id_nmos(Vgs, Vds):
    if Vgs < Vth_n:
        return 0
    elif Vds < (Vgs - Vth_n):
        return mu_n * Cox * W / L * ((Vgs - Vth_n) * Vds - 0.5 * Vds ** 2) * (1 + lambda_n * Vds)
    else:
        return 0.5 * mu_n * Cox * W / L * (Vgs - Vth_n) ** 2 * (1 + lambda_n * Vds)

def calculate_Id_pmos(Vsg, Vsd):
    if Vsg < abs(Vth_p):
        return 0
    elif Vsd < (Vsg - abs(Vth_p)):
        return mu_p * Cox * W / L * ((Vsg - abs(Vth_p)) * Vsd - 0.5 * Vsd ** 2) * (1 + lambda_p * Vsd)
    else:
        return 0.5 * mu_p * Cox * W / L * (Vsg - abs(Vth_p)) ** 2 * (1 + lambda_p * Vsd)

# プロット準備
plt.figure(figsize=(12, 6))

# NMOSのVds-Id特性プロット
plt.subplot(1, 2, 1)
for Vgs in Vgs_values:
    Id_nmos = [calculate_Id_nmos(Vgs, Vds) for Vds in Vds_values]
    plt.plot(Vds_values, Id_nmos, label=f'Vgs={Vgs:.2f} V')
plt.xlabel('$V_{DS}$ (V)')
plt.ylabel('$I_{D}$ (A)')
plt.title('NMOS $V_{DS}$-$I_{D}$ Characteristics')
plt.legend()
plt.grid()

# PMOSのVds-Id特性プロット
plt.subplot(1, 2, 2)
for Vsg in Vgs_values:
    Id_pmos = [calculate_Id_pmos(Vsg, Vsd) for Vsd in Vds_values]
    plt.plot(Vds_values, Id_pmos, label=f'Vsg={Vsg:.2f} V')
plt.xlabel('$V_{SD}$ (V)')
plt.ylabel('$I_{D}$ (A)')
plt.title('PMOS $V_{SD}$-$I_{D}$ Characteristics')
plt.legend()
plt.grid()

plt.tight_layout()
plt.show()
